<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>﷽</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on ﷽</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 May 2025 22:37:46 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Managed Meltano Platform</title>
      <link>http://localhost:1313/posts/managed-meltano-platform/</link>
      <pubDate>Wed, 07 May 2025 22:37:46 -0700</pubDate>
      <guid>http://localhost:1313/posts/managed-meltano-platform/</guid>
      <description>&lt;p&gt;Disclaimer: This is an MVP that I created from chatgpt&lt;/p&gt;&#xA;&lt;h1 id=&#34;mvp-plan-managed-meltano-based-etl-platform-python-only&#34;&gt;MVP Plan: Managed Meltano-Based ETL Platform (Python-Only)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-goal&#34;&gt;🎯 Goal&lt;/h2&gt;&#xA;&lt;p&gt;Build a SaaS platform that allows users to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Configure batch ETL pipelines using popular API and database sources.&lt;/li&gt;&#xA;&lt;li&gt;Authenticate using simplified OAuth (via Nango or custom).&lt;/li&gt;&#xA;&lt;li&gt;Load data into cloud data warehouses (BigQuery, Snowflake, etc.).&lt;/li&gt;&#xA;&lt;li&gt;Monitor pipeline runs, view logs, and re-trigger syncs from a web dashboard.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-architecture-overview&#34;&gt;🧱 Architecture Overview&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;              ┌──────────────────────┐&#xA;              │     Frontend (UI)    │&#xA;              │  (React or Next.js)  │&#xA;              └─────────┬────────────┘&#xA;                        │ REST API&#xA;                ┌───────▼──────────┐&#xA;                │  Python Backend  │ ◄── FastAPI / Django REST&#xA;                └───────┬──────────┘&#xA;                        │&#xA;   ┌────────────────────▼────────────────────┐&#xA;   │              PostgreSQL                 │ ◄── User data, pipeline configs, job logs&#xA;   └────────────────────┬────────────────────┘&#xA;                        │&#xA;              ┌─────────▼──────────┐&#xA;              │     Meltano CLI    │ ◄── Python subprocess (tap → target)&#xA;              └─────────┬──────────┘&#xA;                        │&#xA;             ┌──────────▼───────────┐&#xA;             │     OAuth via Nango  │ ◄── Used during connector setup&#xA;             └──────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-tech-stack&#34;&gt;🛠️ Tech Stack&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Component&lt;/th&gt;&#xA;          &lt;th&gt;Tool/Framework&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Backend API&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FastAPI or Django REST&lt;/td&gt;&#xA;          &lt;td&gt;FastAPI preferred for async job handling and performance&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;ETL Engine&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Meltano (Python CLI)&lt;/td&gt;&#xA;          &lt;td&gt;Runs Singer taps and dbt transforms&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Job Execution&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;subprocess&lt;/code&gt; (MVP), or Celery + Redis&lt;/td&gt;&#xA;          &lt;td&gt;Keep it simple at first with direct CLI calls&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;PostgreSQL&lt;/td&gt;&#xA;          &lt;td&gt;Store users, configs, sync history, and logs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;OAuth Handling&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Nango&lt;/td&gt;&#xA;          &lt;td&gt;Avoid managing client secrets and token refresh logic&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Frontend&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;React or Next.js&lt;/td&gt;&#xA;          &lt;td&gt;Optional in early stages; can use Swagger/Postman initially&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Monitoring/Alerts&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;SMTP (email), logging to DB&lt;/td&gt;&#xA;          &lt;td&gt;Optional Slack webhook integration&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-suggested-mvp-connectors&#34;&gt;🔌 Suggested MVP Connectors&lt;/h2&gt;&#xA;&lt;p&gt;Curate 3–4 stable connectors with high demand:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transcribing Urdu With OCR</title>
      <link>http://localhost:1313/posts/transcribing-urdu-with-ocr/</link>
      <pubDate>Thu, 29 Aug 2024 02:46:37 -0700</pubDate>
      <guid>http://localhost:1313/posts/transcribing-urdu-with-ocr/</guid>
      <description>&lt;p&gt;My mother needed some help transcribing a document written in urdu. Normally this should as simple as copy and pasting from the document, but this was a pdf that only recorded glyphs?&lt;/p&gt;&#xA;&lt;p&gt;I tried to use the OCR software from my iphone, which did detect the letters from the document, but it transcribed the letters as arabic. One of the problems with this is that the Urdu alphabet is a superset of arabic, so many letters were being incorrectly mapped.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
